// Code generated by spicedb-gen, DO NOT EDIT.

package menusvc

import (
  "github.com/danhtran94/authzed-codegen/pkg/authz"

  "context"
)

const TypeCompany authz.Type = "menusvc/company"
type RelationCompany authz.Relation
type PermissionCompany authz.Permission

const CompanyAdmin RelationCompany = "admin"
type CompanyAdminObjects struct {
  User []User
}
const CompanyManager RelationCompany = "manager"
type CompanyManagerObjects struct {
  User []User
}
const CompanyEmployee RelationCompany = "employee"
type CompanyEmployeeObjects struct {
  User []User
}

type Company authz.ID
func CompanyStringer(id authz.StringConvertable) Company {
  return Company(id.String())
}

func CompanyStringers(ids ...authz.StringConvertable) []Company {
  result := []Company{}
  for _, id := range ids {
    result = append(result, Company(id.String()))
  }
  return result
}

func (company Company) ToList() []Company {
  return []Company{ company }
}

func (company Company) CreateAdminRelations(ctx context.Context, objects CompanyAdminObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Relation(CompanyAdmin), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  return nil
}
func (company Company) CreateManagerRelations(ctx context.Context, objects CompanyManagerObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Relation(CompanyManager), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  return nil
}
func (company Company) CreateEmployeeRelations(ctx context.Context, objects CompanyEmployeeObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Relation(CompanyEmployee), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  return nil
}

func (company Company) DeleteAdminRelations(ctx context.Context, objects CompanyAdminObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Relation(CompanyAdmin), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  return nil
}

func (company Company) DeleteManagerRelations(ctx context.Context, objects CompanyManagerObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Relation(CompanyManager), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  return nil
}

func (company Company) DeleteEmployeeRelations(ctx context.Context, objects CompanyEmployeeObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Relation(CompanyEmployee), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  return nil
}

func (company Company) ReadAdminUserRelations(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(ctx, authz.Resource{
    Type: TypeCompany,
    ID: authz.ID(company),
  }, authz.Relation(CompanyAdmin), TypeUser)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[User](ids), nil
}

func (company Company) ReadManagerUserRelations(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(ctx, authz.Resource{
    Type: TypeCompany,
    ID: authz.ID(company),
  }, authz.Relation(CompanyManager), TypeUser)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[User](ids), nil
}

func (company Company) ReadEmployeeUserRelations(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(ctx, authz.Resource{
    Type: TypeCompany,
    ID: authz.ID(company),
  }, authz.Relation(CompanyEmployee), TypeUser)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[User](ids), nil
}

const CompanyManage PermissionCompany = "manage"

type CheckCompanyManageInputs struct {
  User []User
}

func (company Company) CheckManage(ctx context.Context, input CheckCompanyManageInputs) (bool, error) {
  if len(input.User) == 0 && true {
    return false, authz.ErrNoInput
  }

  if len(input.User) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Permission(CompanyManage), TypeUser, authz.IDs(input.User))
    if err != nil {
      return false, err
    }
  }
  
  return true, nil
}

func LookupManageCompanyResources(ctx context.Context, input CheckCompanyManageInputs) ([]Company, error) {
  if len(input.User) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(ctx,
      TypeCompany, authz.Permission(CompanyManage), 
      TypeUser, authz.IDs(input.User),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Company](ids), nil
  }
  
  return []Company{}, nil
}
const CompanyCreateBooking PermissionCompany = "create_booking"

type CheckCompanyCreateBookingInputs struct {
  User []User
}

func (company Company) CheckCreateBooking(ctx context.Context, input CheckCompanyCreateBookingInputs) (bool, error) {
  if len(input.User) == 0 && true {
    return false, authz.ErrNoInput
  }

  if len(input.User) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Permission(CompanyCreateBooking), TypeUser, authz.IDs(input.User))
    if err != nil {
      return false, err
    }
  }
  
  return true, nil
}

func LookupCreateBookingCompanyResources(ctx context.Context, input CheckCompanyCreateBookingInputs) ([]Company, error) {
  if len(input.User) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(ctx,
      TypeCompany, authz.Permission(CompanyCreateBooking), 
      TypeUser, authz.IDs(input.User),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Company](ids), nil
  }
  
  return []Company{}, nil
}
const CompanyCreateOrder PermissionCompany = "create_order"

type CheckCompanyCreateOrderInputs struct {
  User []User
}

func (company Company) CheckCreateOrder(ctx context.Context, input CheckCompanyCreateOrderInputs) (bool, error) {
  if len(input.User) == 0 && true {
    return false, authz.ErrNoInput
  }

  if len(input.User) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(ctx, authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, authz.Permission(CompanyCreateOrder), TypeUser, authz.IDs(input.User))
    if err != nil {
      return false, err
    }
  }
  
  return true, nil
}

func LookupCreateOrderCompanyResources(ctx context.Context, input CheckCompanyCreateOrderInputs) ([]Company, error) {
  if len(input.User) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(ctx,
      TypeCompany, authz.Permission(CompanyCreateOrder), 
      TypeUser, authz.IDs(input.User),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Company](ids), nil
  }
  
  return []Company{}, nil
}

func (company Company) LookupManageUserSubjects(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(ctx,
    authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, 
    authz.Permission(CompanyManage), TypeUser,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[User](ids), nil
}

func (company Company) LookupCreateBookingUserSubjects(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(ctx,
    authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, 
    authz.Permission(CompanyCreateBooking), TypeUser,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[User](ids), nil
}

func (company Company) LookupCreateOrderUserSubjects(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(ctx,
    authz.Resource{
      Type: TypeCompany,
      ID: authz.ID(company),
    }, 
    authz.Permission(CompanyCreateOrder), TypeUser,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[User](ids), nil
}
