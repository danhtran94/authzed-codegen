// Code generated by spicedb-gen, DO NOT EDIT.

package menusvc

import (
  "github.com/danhtran94/authzed-codegen/pkg/authz"

  "context"
)

const TypePricelist authz.Type = "menusvc/pricelist"
type RelationPricelist authz.Relation
type PermissionPricelist authz.Permission

const PricelistOwner RelationPricelist = "owner"
type PricelistOwnerObjects struct {
  Company []Company
}

type Pricelist authz.ID

func (pricelist Pricelist) CreateOwnerRelations(ctx context.Context, objects PricelistOwnerObjects) error {
  if len(objects.Company) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(authz.Resource{
      Type: TypePricelist,
      ID: authz.ID(pricelist),
    }, authz.Relation(PricelistOwner), TypeCompany, authz.IDs(objects.Company))
    if err != nil {
      return err
    }
  }
  return nil
}

func (pricelist Pricelist) DeleteOwnerRelations(ctx context.Context, objects PricelistOwnerObjects) error {
  if len(objects.Company) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(authz.Resource{
      Type: TypePricelist,
      ID: authz.ID(pricelist),
    }, authz.Relation(PricelistOwner), TypeCompany, authz.IDs(objects.Company))
    if err != nil {
      return err
    }
  }
  return nil
}

func (pricelist Pricelist) ReadOwnerCompanyRelations(ctx context.Context) ([]Company, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(authz.Resource{
    Type: TypePricelist,
    ID: authz.ID(pricelist),
  }, authz.Relation(PricelistOwner), TypeCompany)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[Company](ids), nil
}

const PricelistWrite PermissionPricelist = "write"

type CheckPricelistWriteInputs struct {
  User []User
}

func (pricelist Pricelist) CheckWrite(ctx context.Context, input CheckPricelistWriteInputs) (bool, error) {
  if len(input.User) == 0 && true {
    return false, authz.ErrNoInput
  }

  if len(input.User) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(authz.Resource{
      Type: TypePricelist,
      ID: authz.ID(pricelist),
    }, authz.Permission(PricelistWrite), TypeUser, authz.IDs(input.User))
    if err != nil {
      return false, err
    }
  }
  
  return true, nil
}

func LookupWritePricelistResources(ctx context.Context, input CheckPricelistWriteInputs) ([]Pricelist, error) {
  if len(input.User) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(
      TypePricelist, authz.Permission(PricelistWrite), 
      TypeUser, authz.IDs(input.User),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Pricelist](ids), nil
  }
  
  return []Pricelist{}, nil
}

func (pricelist Pricelist) LookupWriteUserSubjects(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(
    authz.Resource{
      Type: TypePricelist,
      ID: authz.ID(pricelist),
    }, 
    authz.Permission(PricelistWrite), TypeUser,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[User](ids), nil
}
