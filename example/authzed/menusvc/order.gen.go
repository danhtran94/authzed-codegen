// Code generated by spicedb-gen, DO NOT EDIT.

package menusvc

import (
  "github.com/danhtran94/authzed-codegen/pkg/authz"

  "context"
)

const TypeOrder authz.Type = "menusvc/order"
type RelationOrder authz.Relation
type PermissionOrder authz.Permission

const OrderCreator RelationOrder = "creator"
type OrderCreatorObjects struct {
  User []User
  Customer []Customer
}
const OrderBelongsCompany RelationOrder = "belongs_company"
type OrderBelongsCompanyObjects struct {
  Company []Company
}

type Order authz.ID

func (order Order) CreateCreatorRelations(ctx context.Context, objects OrderCreatorObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Relation(OrderCreator), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  if len(objects.Customer) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Relation(OrderCreator), TypeCustomer, authz.IDs(objects.Customer))
    if err != nil {
      return err
    }
  }
  return nil
}

func (order Order) CreateBelongsCompanyRelations(ctx context.Context, objects OrderBelongsCompanyObjects) error {
  if len(objects.Company) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Relation(OrderBelongsCompany), TypeCompany, authz.IDs(objects.Company))
    if err != nil {
      return err
    }
  }
  return nil
}

func (order Order) DeleteCreatorRelations(ctx context.Context, objects OrderCreatorObjects) error {
  if len(objects.User) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Relation(OrderCreator), TypeUser, authz.IDs(objects.User))
    if err != nil {
      return err
    }
  }
  if len(objects.Customer) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Relation(OrderCreator), TypeCustomer, authz.IDs(objects.Customer))
    if err != nil {
      return err
    }
  }
  return nil
}

func (order Order) DeleteBelongsCompanyRelations(ctx context.Context, objects OrderBelongsCompanyObjects) error {
  if len(objects.Company) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Relation(OrderBelongsCompany), TypeCompany, authz.IDs(objects.Company))
    if err != nil {
      return err
    }
  }
  return nil
}

func (order Order) ReadCreatorUserRelations(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(ctx, authz.Resource{
    Type: TypeOrder,
    ID: authz.ID(order),
  }, authz.Relation(OrderCreator), TypeUser)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[User](ids), nil
}

func (order Order) ReadCreatorCustomerRelations(ctx context.Context) ([]Customer, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(ctx, authz.Resource{
    Type: TypeOrder,
    ID: authz.ID(order),
  }, authz.Relation(OrderCreator), TypeCustomer)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[Customer](ids), nil
}

func (order Order) ReadBelongsCompanyCompanyRelations(ctx context.Context) ([]Company, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(ctx, authz.Resource{
    Type: TypeOrder,
    ID: authz.ID(order),
  }, authz.Relation(OrderBelongsCompany), TypeCompany)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[Company](ids), nil
}

const OrderWrite PermissionOrder = "write"

type CheckOrderWriteInputs struct {
  User []User
  Customer []Customer
}

func (order Order) CheckWrite(ctx context.Context, input CheckOrderWriteInputs) (bool, error) {
  if len(input.User) == 0 && len(input.Customer) == 0 && true {
    return false, authz.ErrNoInput
  }

  if len(input.User) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Permission(OrderWrite), TypeUser, authz.IDs(input.User))
    if err != nil {
      return false, err
    }
  }
  if len(input.Customer) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(ctx, authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, authz.Permission(OrderWrite), TypeCustomer, authz.IDs(input.Customer))
    if err != nil {
      return false, err
    }
  }
  
  return true, nil
}

func LookupWriteOrderResources(ctx context.Context, input CheckOrderWriteInputs) ([]Order, error) {
  if len(input.User) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(ctx,
      TypeOrder, authz.Permission(OrderWrite), 
      TypeUser, authz.IDs(input.User),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Order](ids), nil
  }
  if len(input.Customer) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(ctx,
      TypeOrder, authz.Permission(OrderWrite), 
      TypeCustomer, authz.IDs(input.Customer),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Order](ids), nil
  }
  
  return []Order{}, nil
}

func (order Order) LookupWriteUserSubjects(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(ctx,
    authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, 
    authz.Permission(OrderWrite), TypeUser,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[User](ids), nil
}
func (order Order) LookupWriteCustomerSubjects(ctx context.Context) ([]Customer, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(ctx,
    authz.Resource{
      Type: TypeOrder,
      ID: authz.ID(order),
    }, 
    authz.Permission(OrderWrite), TypeCustomer,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[Customer](ids), nil
}
