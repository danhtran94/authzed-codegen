// Code generated by spicedb-gen, DO NOT EDIT.

package bookingsvc

import (
  "github.com/danhtran94/authzed-codegen/pkg/authz"

  "context"
)

const TypeBooking authz.Type = "bookingsvc/booking"
type RelationBooking authz.Relation
type PermissionBooking authz.Permission

const BookingOwner RelationBooking = "owner"
type BookingOwnerObjects struct {
  Employee []Employee
}
const BookingCreator RelationBooking = "creator"
type BookingCreatorObjects struct {
  Employee []Employee
  Customer []Customer
}

type Booking authz.ID

func (booking Booking) CreateOwnerRelations(ctx context.Context, objects BookingOwnerObjects) error {
  if len(objects.Employee) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Relation(BookingOwner), TypeEmployee, authz.IDs(objects.Employee))
    if err != nil {
      return err
    }
  }
  return nil
}

func (booking Booking) CreateCreatorRelations(ctx context.Context, objects BookingCreatorObjects) error {
  if len(objects.Employee) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Relation(BookingCreator), TypeEmployee, authz.IDs(objects.Employee))
    if err != nil {
      return err
    }
  }
  if len(objects.Customer) > 0 {
    err := authz.GetEngine(ctx).CreateRelations(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Relation(BookingCreator), TypeCustomer, authz.IDs(objects.Customer))
    if err != nil {
      return err
    }
  }
  return nil
}

func (booking Booking) DeleteOwnerRelations(ctx context.Context, objects BookingOwnerObjects) error {
  if len(objects.Employee) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Relation(BookingOwner), TypeEmployee, authz.IDs(objects.Employee))
    if err != nil {
      return err
    }
  }
  return nil
}

func (booking Booking) DeleteCreatorRelations(ctx context.Context, objects BookingCreatorObjects) error {
  if len(objects.Employee) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Relation(BookingCreator), TypeEmployee, authz.IDs(objects.Employee))
    if err != nil {
      return err
    }
  }
  if len(objects.Customer) > 0 {
    err := authz.GetEngine(ctx).DeleteRelations(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Relation(BookingCreator), TypeCustomer, authz.IDs(objects.Customer))
    if err != nil {
      return err
    }
  }
  return nil
}

func (booking Booking) ReadOwnerEmployeeRelations(ctx context.Context) ([]Employee, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(authz.Resource{
    Type: TypeBooking,
    ID: authz.ID(booking),
  }, authz.Relation(BookingOwner), TypeEmployee)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[Employee](ids), nil
}

func (booking Booking) ReadCreatorEmployeeRelations(ctx context.Context) ([]Employee, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(authz.Resource{
    Type: TypeBooking,
    ID: authz.ID(booking),
  }, authz.Relation(BookingCreator), TypeEmployee)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[Employee](ids), nil
}

func (booking Booking) ReadCreatorCustomerRelations(ctx context.Context) ([]Customer, error) {
  ids, err := authz.GetEngine(ctx).ReadRelations(authz.Resource{
    Type: TypeBooking,
    ID: authz.ID(booking),
  }, authz.Relation(BookingCreator), TypeCustomer)
  if err != nil {
    return nil, err
  }
  
  return authz.FromIDs[Customer](ids), nil
}

const BookingWrite PermissionBooking = "write"

type CheckBookingWriteInputs struct {
  Employee []Employee
  Customer []Customer
  User []User
}

func (booking Booking) CheckWrite(ctx context.Context, input CheckBookingWriteInputs) (bool, error) {
  if len(input.Employee) == 0 && len(input.Customer) == 0 && len(input.User) == 0 && true {
    return false, authz.ErrNoInput
  }

  if len(input.Employee) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Permission(BookingWrite), TypeEmployee, authz.IDs(input.Employee))
    if err != nil {
      return false, err
    }
  }
  if len(input.Customer) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Permission(BookingWrite), TypeCustomer, authz.IDs(input.Customer))
    if err != nil {
      return false, err
    }
  }
  if len(input.User) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Permission(BookingWrite), TypeUser, authz.IDs(input.User))
    if err != nil {
      return false, err
    }
  }
  
  return true, nil
}

func LookupWriteBookingResources(ctx context.Context, input CheckBookingWriteInputs) ([]Booking, error) {
  if len(input.Employee) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(
      TypeBooking, authz.Permission(BookingWrite), 
      TypeEmployee, authz.IDs(input.Employee),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Booking](ids), nil
  }
  if len(input.Customer) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(
      TypeBooking, authz.Permission(BookingWrite), 
      TypeCustomer, authz.IDs(input.Customer),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Booking](ids), nil
  }
  if len(input.User) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(
      TypeBooking, authz.Permission(BookingWrite), 
      TypeUser, authz.IDs(input.User),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Booking](ids), nil
  }
  
  return []Booking{}, nil
}
const BookingChangeOwner PermissionBooking = "change_owner"

type CheckBookingChangeOwnerInputs struct {
  Employee []Employee
  Customer []Customer
  User []User
}

func (booking Booking) CheckChangeOwner(ctx context.Context, input CheckBookingChangeOwnerInputs) (bool, error) {
  if len(input.Employee) == 0 && len(input.Customer) == 0 && len(input.User) == 0 && true {
    return false, authz.ErrNoInput
  }

  if len(input.Employee) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Permission(BookingChangeOwner), TypeEmployee, authz.IDs(input.Employee))
    if err != nil {
      return false, err
    }
  }
  if len(input.Customer) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Permission(BookingChangeOwner), TypeCustomer, authz.IDs(input.Customer))
    if err != nil {
      return false, err
    }
  }
  if len(input.User) > 0 {
    err := authz.GetEngine(ctx).CheckPermission(authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, authz.Permission(BookingChangeOwner), TypeUser, authz.IDs(input.User))
    if err != nil {
      return false, err
    }
  }
  
  return true, nil
}

func LookupChangeOwnerBookingResources(ctx context.Context, input CheckBookingChangeOwnerInputs) ([]Booking, error) {
  if len(input.Employee) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(
      TypeBooking, authz.Permission(BookingChangeOwner), 
      TypeEmployee, authz.IDs(input.Employee),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Booking](ids), nil
  }
  if len(input.Customer) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(
      TypeBooking, authz.Permission(BookingChangeOwner), 
      TypeCustomer, authz.IDs(input.Customer),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Booking](ids), nil
  }
  if len(input.User) > 0 {
    ids, err := authz.GetEngine(ctx).LookupResources(
      TypeBooking, authz.Permission(BookingChangeOwner), 
      TypeUser, authz.IDs(input.User),
    )
    if err != nil {
      return nil, err
    }

    return authz.FromIDs[Booking](ids), nil
  }
  
  return []Booking{}, nil
}

func (booking Booking) LookupWriteEmployeeSubjects(ctx context.Context) ([]Employee, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(
    authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, 
    authz.Permission(BookingWrite), TypeEmployee,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[Employee](ids), nil
}
func (booking Booking) LookupWriteCustomerSubjects(ctx context.Context) ([]Customer, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(
    authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, 
    authz.Permission(BookingWrite), TypeCustomer,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[Customer](ids), nil
}
func (booking Booking) LookupWriteUserSubjects(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(
    authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, 
    authz.Permission(BookingWrite), TypeUser,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[User](ids), nil
}

func (booking Booking) LookupChangeOwnerEmployeeSubjects(ctx context.Context) ([]Employee, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(
    authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, 
    authz.Permission(BookingChangeOwner), TypeEmployee,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[Employee](ids), nil
}
func (booking Booking) LookupChangeOwnerCustomerSubjects(ctx context.Context) ([]Customer, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(
    authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, 
    authz.Permission(BookingChangeOwner), TypeCustomer,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[Customer](ids), nil
}
func (booking Booking) LookupChangeOwnerUserSubjects(ctx context.Context) ([]User, error) {
  ids, err := authz.GetEngine(ctx).LookupSubjects(
    authz.Resource{
      Type: TypeBooking,
      ID: authz.ID(booking),
    }, 
    authz.Permission(BookingChangeOwner), TypeUser,
  )
  if err != nil {
    return nil, err
  }

  return authz.FromIDs[User](ids), nil
}
